#用Debian或Ubuntu Linux，直接安装Git
sudo apt-get install git


#你在本机上所有git仓库的提交，机器都会记录是谁提交的。所以要设置用户名、邮箱
#设置用户名     
git config --global user.name "litaiguo"
#设置邮箱       
git config --global user.email "litaiguo1009@126.com"


#新建文件夹、切换到相应目录
mkdir learngit
cd learngit
pwd
#初始化一个Git仓库     
git init




#将修改保存到暂存区
git add tiger_20180524.txt

#将暂存区内容提交到版本库
git commit -m "wrote a readme file"

#查看当前版本库状态
git status



#比较暂存区与当前版本库之间的差异
git diff

#1，当工作区有改动的时候，临时区为空（没有进行git add），那么diff的对比是和上次的commit的记录进行对比的。 
#2，当工作区有改动，临时区有东西的时候，diff是和临时区进行比较的。


$ git diff                 (1)：working tree和stage文件的差异
$ git diff --stat             #查看简单的diff结果

$ git diff --cached        
$ git diff --staged        (2)stage和commit文件的差异

$ git diff HEAD            (3)：commit和working tree文件的差异（查看工作区和版本库里面最新版本的区别）

$ git diff test            (1)：不是对比当前分支，而是对比test分支
$ git diff HEAD -- ./test  (2)：对比其中的test文件
$ git diff HEAD^ HEAD      (3)：对比最近两次提交之间的差异

$ git diff topic master    (1)：对比topic和master分支的差异





#显示从最近到最远的提交日志
git log
#显示从最近到最远的提交日志
git log  --pretty=oneline

#版本回退
git reset --hard HEAD^

#记录你的每一次命令
git reflog


#命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
#一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
#一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
#总之，就是让这个文件回到最近一次git commit或git add时的状态。
$ git checkout -- readme.txt



#把暂存区的修改撤销掉（unstage），重新放回工作区：
git reset HEAD readme.txt

#删除文件
$ rm test.txt




远程仓库相关
#本地关联远程仓库
$ git remote add origin git@github.com:litaiguo/learngit.git

#第一次把本地库的所有内容推送到远程库上
$ git push -u origin master

#后续把本地库的内容推送到远程库上
git push origin master


#把远程库上的内容克隆一个本地库
$ git clone git@github.com:litaiguo/learngit.git






#创建并切换到 dev分支
git checkout -b dev

$ git branch dev     #创建分支
$ git checkout dev   #切换分支



#查看当前分支
$ git branch


#切回到master分支
$ git checkout master

#合并指定分支到当前分支 （假设你已经在master分支上了，把dev分支合到master上来）
$ git merge dev          

#合并完成之后删除分支
$ git branch -d dev   

#采用非Fast forward模式合并分支
$ git merge --no-ff -m "merge with no-ff" dev  

#查看分支合并图
git log --graph


#冲突了，文件样子
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
<<<<<<< HEAD
Creating a new branch is quick & simple.
=======
Creating a new branch is quick AND simple.
>>>>>>> feature1       


#当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
#解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
#用git log --graph命令可以看到分支合并图。




#暂时把当前分支的工作现场存起来
git stash
#查看存储列表
git stash list
#把临时存储的内容恢复+ 删除临时存储
git stash apply     
git stash drop

#把临时存储的内容恢复并删除临时存储
git stash pop



#强行删除feature-vulcan分支
git branch -D feature-vulcan


#查看远程库的信息
git remote
#显示更详细的信息
git remote -v

#推送到master
$ git push origin master
#推送到其它分支
$ git push origin dev


先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送

#在本地创建和远程分支对应的分支
git checkout -b branch-name origin/branch-name
#指定本地dev分支与远程origin/dev分支链接
git branch --set-upstream-to=origin/dev dev



#rebase操作可以把本地未push的分叉提交历史整理成直线；
git rebase

#给当前分支打上标签
$ git tag v1.0

#查看所有标签
git tag


#给commit id是f52c633的这次提交打上标签
git tag v0.9 f52c633

#查看标签信息
git show v1.0

#创建带有说明的标签（用-a指定标签名，-m指定说明文字）
$ git tag -a v0.1 -m "version 0.1 released" 1094adb

#删除标签
$ git tag -d v0.1

#推送某个标签到远程
$ git push origin v1.0
#一次性推送全部尚未推送到远程的本地标签
$ git push origin --tags




#标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除，然后从远程删除。
$ git tag -d v0.9
$ git push origin :refs/tags/v0.9





#让Git显示颜色，会让命令输出看起来更醒目
git config --global color.ui true


#强制添加某文件到Git
$ git add -f App.class

#用命令检查 .gitignore文件哪里写错了
git check-ignore


#指定某个命令的别名
$ git config --global alias.st status

#指定git last命令为显示最后一次提交信息
$ git config --global alias.last 'log -1'


#指定git lg命令为下面这一大串
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"





每个仓库的Git配置文件都放在.git/config文件中
别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。

而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：

